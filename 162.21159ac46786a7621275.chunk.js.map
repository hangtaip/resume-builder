{"version":3,"file":"162.21159ac46786a7621275.chunk.js","mappings":"2NAQe,MAAMA,UAAkBC,YACpC,WAAAC,GACGC,QACAC,KAAKC,aAAa,CAAEC,KAAM,SAC1BF,KAAKG,SACLH,KAAKI,YACL,KAAQC,IAAI,MACf,CAEA,MAAAC,GACG,MAIMC,EAAM,sRAJC,QAAK,MAAQ,CACvBC,QAAS,CAAC,UAAW,UASFC,KAAK,GAAGC,qcAgB9BV,KAAKW,WAAWC,UAAY,IAAUC,SAASN,EAClD,CAEA,OAAAO,GACG,MAAMC,EAAQ,IAAIC,cAClBD,EAAME,YAAY,UAAOC,YACzBlB,KAAKW,WAAWQ,mBAAqB,CAACJ,EACzC,CAEA,kBAAAK,GACGpB,KAAKG,SAAW,IAAI,IAASH,MAC7BA,KAAKW,WAAWU,iBAAiB,QAASrB,KAAKG,UAC/CH,KAAKI,YAAc,IAAakB,UAAU,eAAgBtB,KAAKG,SAClE,CAEA,WAAAoB,CAAYC,EAAOC,GAGhB,GAFcA,aAAqB,IAExB,CACR,MAAMC,EAAOF,EAAMG,OAAOC,QAAQ,cAClC,IAAIC,EACAC,EACAC,EAAoB,GAExB,IAAKL,EAAM,OACX,IAAK1B,KAAKW,WAAWqB,SAASN,GAAO,OAErC,QAAQ,GACL,KAAKA,EAAKO,UAAUD,SAAS,YAC1BH,EAAUL,EAAMG,OAAOC,QAAQ,oBAC/BC,EAAQI,UAAU5B,IAAI,uBACtByB,EAAc9B,KAAKW,WAAWuB,cAAc,gBAC5CH,EAAkBI,KAAK,mBACvBL,EAAYM,QAAQC,kBAAoBC,KAAKC,UAAUR,GACvD,MACH,KAAKL,EAAKO,UAAUD,SAAS,mBAC1BH,EAAUL,EAAMG,OAAOC,QAAQ,oBAC/BC,EAAQI,UAAUO,OAAO,uBACzBV,EAAc9B,KAAKW,WAAWuB,cAAc,gBAC5CH,EAAkBI,KAAK,mBACvBL,EAAYM,QAAQK,qBAAuBH,KAAKC,UAAUR,GAGnE,MACGW,QAAQC,IAAI,WAElB,CAEA,kBAAAC,CAAmBpB,EAAOC,GAGvB,GAFcA,aAAqB,IAExB,CACR,MAAMC,EAAO1B,KAAKW,WAAWuB,cAAc,oBAE3C,IAAKR,EAAM,OACX,IAAK1B,KAAKW,WAAWqB,SAASN,GAAO,OAEjCA,EAAKO,UAAUD,SAASR,EAAMqB,OAAOC,YACtCpB,EAAKO,UAAUO,OAAOhB,EAAMqB,OAAOC,UAGzC,MACGJ,QAAQC,IAAI,WAElB,CAEA,iBAAAI,GACG/C,KAAKM,SACLN,KAAKc,UACLd,KAAKoB,oBACR,CAEA,oBAAA4B,GACGhD,KAAKI,aACR,GAGH,QAAsB,aAAcR,E","sources":["webpack://resume-builder/./src/components/customNav/customNav.js"],"sourcesContent":["import DOMPurify from \"dompurify\";\nimport Listener from \"../../js/listener.js\";\nimport { registerCustomElement } from \"../../js/registerComponent\";\nimport styles from \"./customNav.shadow.scss\";\nimport { icon, library } from \"@fortawesome/fontawesome-svg-core\";\nimport { faBars } from \"@fortawesome/free-solid-svg-icons\";\nimport eventManager from \"../../js/eventManager.js\";\n\nexport default class CustomNav extends HTMLElement {\n   constructor() {\n      super();\n      this.attachShadow({ mode: \"open\" });\n      this.listener;\n      this.unsubscribe;\n      library.add(faBars);\n   }\n\n   render() {\n      const bars = icon(faBars, {\n         classes: [\"fa-bars\", \"icon\"],\n      }); \n\n      const dom = `\n         <div class=\"container\">\n            <nav class=\"navbar fixedTop clickableToggle\">\n               <div class=\"navbar_inner\">\n                  <div class=\"navbar_items\">\n                  <button class=\"clickable menu-btn\" type=\"button\">\n                     ${bars.node[0].outerHTML}\n                  </button>\n                  </div>\n                  <div class=\"navbar_items app_title\">\n                     Resume Builder\n                  </div>\n               </div>\n               <div class=\"navbar_sidebar\">\n                  <custom-aside></custom-aside>\n               </div>\n               <div class=\"navbar_backdrop clickable\">\n               </div>\n            </nav>\n         </div>\n         `;\n\n      this.shadowRoot.innerHTML = DOMPurify.sanitize(dom);\n   }\n\n   styling() {\n      const sheet = new CSSStyleSheet();\n      sheet.replaceSync(styles.toString());\n      this.shadowRoot.adoptedStyleSheets = [sheet];\n   }\n\n   setupEventListener() {\n      this.listener = new Listener(this);\n      this.shadowRoot.addEventListener(\"click\", this.listener);\n      this.unsubscribe = eventManager.subscribe(\"toggleNavbar\", this.listener);\n   }\n\n   handleClick(event, delegated) {\n      const isDOM = delegated instanceof Listener;\n\n      if (isDOM) {\n         const elem = event.target.closest(\".clickable\");\n         let toggler;\n         let customAside;\n         let customAsideValues = []\n\n         if (!elem) return;\n         if (!this.shadowRoot.contains(elem)) return;\n\n         switch (true) {\n            case elem.classList.contains(\"menu-btn\"):\n               toggler = event.target.closest(\".clickableToggle\");\n               toggler.classList.add(\"navbar_sidebar_show\"); \n               customAside = this.shadowRoot.querySelector(\"custom-aside\");\n               customAsideValues.push(\"sidebar-visible\");\n               customAside.dataset.containerClassAdd = JSON.stringify(customAsideValues);\n               break;\n            case elem.classList.contains(\"navbar_backdrop\"):\n               toggler = event.target.closest(\".clickableToggle\");\n               toggler.classList.remove(\"navbar_sidebar_show\"); \n               customAside = this.shadowRoot.querySelector(\"custom-aside\");\n               customAsideValues.push(\"sidebar-visible\");\n               customAside.dataset.containerClassRemove = JSON.stringify(customAsideValues);\n               break;\n         }\n      } else {\n         console.log(\"external\");\n      }\n   }\n\n   handleToggleNavbar(event, delegated) {\n      const isDOM = delegated instanceof Listener;\n\n      if (isDOM) {\n         const elem = this.shadowRoot.querySelector(\".clickableToggle\"); \n\n         if (!elem) return;\n         if (!this.shadowRoot.contains(elem)) return;\n\n         if (elem.classList.contains(event.detail.className)) {\n            elem.classList.remove(event.detail.className);\n         }         \n         \n      } else {\n         console.log(\"external\");\n      } \n   }\n\n   connectedCallback() {\n      this.render();\n      this.styling();\n      this.setupEventListener();\n   }\n\n   disconnectedCallback() {\n      this.unsubscribe();\n   }\n}\n\nregisterCustomElement(\"custom-nav\", CustomNav);\n"],"names":["CustomNav","HTMLElement","constructor","super","this","attachShadow","mode","listener","unsubscribe","add","render","dom","classes","node","outerHTML","shadowRoot","innerHTML","sanitize","styling","sheet","CSSStyleSheet","replaceSync","toString","adoptedStyleSheets","setupEventListener","addEventListener","subscribe","handleClick","event","delegated","elem","target","closest","toggler","customAside","customAsideValues","contains","classList","querySelector","push","dataset","containerClassAdd","JSON","stringify","remove","containerClassRemove","console","log","handleToggleNavbar","detail","className","connectedCallback","disconnectedCallback"],"sourceRoot":""}