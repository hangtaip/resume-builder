{"version":3,"file":"212.0fc777ea96410401e90c.chunk.js","mappings":"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","sources":["webpack://resume-builder/./src/components/skills/skills.js","webpack://resume-builder/./src/js/dataURL.js","webpack://resume-builder/./src/js/objectRegistry.js","webpack://resume-builder/./src/components/skills/ lazy ^\\.\\/skills\\-.*\\.shadow\\.scss$ namespace object"],"sourcesContent":["import DOMPurify from \"dompurify\";\nimport Listener from \"../../js/listener.js\";\n// import yaml from \"../../data/data.yaml\";\nimport { registerCustomElement } from \"../../js/registerComponent.js\";\nimport { toDataURL } from \"../../js/dataURL.js\";\n// import styles from \"./skills.shadow.scss\";\nimport { icon, library } from \"@fortawesome/fontawesome-svg-core\";\nimport { faCode } from \"@fortawesome/free-solid-svg-icons\";\nimport eventManager from \"../../js/eventManager.js\";\nimport { isNullUndefinedOrEmpty } from \"../../js/helper.js\";\nimport objectRegistry from \"../../js/objectRegistry.js\";\n\nexport default class UserSkills extends HTMLElement {\n  constructor() {\n    super();\n    this.attachShadow({ mode: \"open\" });\n    this.isReadyPromise = new Promise(resolve => {\n      this.resolveReady = resolve;\n    });\n    this.formRequestPromise = new Promise(resolve => {\n      this.resolveFormRequestReady = resolve;\n    });\n    this.listener;\n    this.customEventData = {\n      await: false,\n      awaitDetail() {\n        return 0;\n      },\n      eventName: \"handleCustomEvent\",\n      details: \"\",\n    };\n    this.styleType = this.dataset.style || \"default\";\n    this.handleCompleteFormRequest = this.handleCompleteFormRequest.bind(this);\n    this.unsubscribe;\n    library.add(faCode);\n  }\n\n  async connectedCallback() {\n    this.setupEventListener();\n    // await this.testRender();\n    this.render().then(() => {\n      this.resolveReady();\n    });\n    this.styling();\n  }\n\n  disconnectedCallback() {\n    this.unsubscribe();\n  }\n\n  // TODO:\n  // - logoColor to handle more languages\n  // - labelName to handle more languages\n  // - have a list to match them\n  async render() { \n    const i = icon(faCode, {\n      classes: [\"fa-code\"],\n    });\n\n    const dom = `\n      <div class=\"container\">\n        <h3 class=\"header\">\n          ${i.node[0].outerHTML}\n          <span class=\"title\">Skills</span>\n        </h3>\n      </div>\n    `;\n\n    this.shadowRoot.innerHTML = DOMPurify.sanitize(dom);\n\n    const images = this.shadowRoot.querySelectorAll(\"img\");\n    const imagePromises = Array.from(images).map(img => {\n      if (img.complete) return Promise.resolve();\n      return new Promise(resolve => { \n        img.onload = resolve; \n        img.onerror = resolve; \n      });\n    });\n\n    await Promise.all(imagePromises);\n    await new Promise(resolve => requestAnimationFrame(() => resolve()));\n  }\n\n  async appendData(data) {\n    const skills = data;\n    const logoColor = (obj) =>\n      obj.name.toLowerCase() == \"javascript\" ? \"black\" : \"white\";\n    const labelName = (obj) =>\n      obj.name.toLowerCase() == \"csharp\" ? \"C%23\" : obj.name;\n    const skillImg = async (obj) => {\n      if (isNullUndefinedOrEmpty(obj.name)) { return }\n\n      if (Object.hasOwn(obj, \"icon\")) {\n        const badgeUrl = await toDataURL(obj.icon).then((dataURL) => {\n          const part = dataURL.split(\",\");\n          const mimeType = part[0].split(\":\")[1].split(\";\")[0];\n          const startMime = part[0].split(\"/\").shift();\n          const endMime = part[0].split(\";\").pop();\n          const fileType = mimeType.split(\"/\").pop();\n          const encodedFileType = encodeURIComponent(fileType);\n          const encodedData = encodeURIComponent(part[1]);\n          const badgeUrl = `https://img.shields.io/badge/${labelName(\n            obj,\n          )}-%23${obj.color}?style=for-the-badge&logo=${startMime}/${encodedFileType};${endMime},${encodedData}&logoColor=${logoColor(\n            obj,\n          )}`;\n\n          return badgeUrl;\n        });\n\n        return new Promise((resolve) => {\n          resolve(`\n            <img alt=\"${obj.name}\" src=\"${badgeUrl}\" class=\"badge\">\n          `);\n        });\n      } else {\n        return new Promise((resolve) => {\n          resolve(`\n            <img alt=\"Static Badge\" src=\"https://img.shields.io/badge/${labelName(\n              obj,\n            )}-%23${obj.color.toString().replace(/^#/, \"\")}?style=for-the-badge&logo=${obj.name}&logoColor=${logoColor(\n              obj,\n            )}\" class=\"badge\">\n          `);\n        });\n      }\n    };\n    const imgPromises = Object.values(skills).map((skill) => skillImg(skill));\n    const skillDom = await Promise.all(imgPromises);\n    this.skillsCount = imgPromises.length;\n    // const skillDom = Object.values(skills).map((skill) => {\n    //   //<img class=\"img\" src=\"${skill.icon}\" alt=\"${skill.name.toLowerCase()}\" />\n    //   {/* <div class=\"card\"> */}\n    //   {/*   <span class=\"body\">${skill.name}</span> */}\n    //   {/* </div> */}\n    //\n    //   return `\n    //     <img alt=\"Static Badge\" src=\"https://img.shields.io/badge/${\n    //     labelName(skill)\n    //   }-%23${skill.color}?style=for-the-badge&logo=${skill.name}&logoColor=${\n    //     logoColor(skill)\n    //   }\">\n    //   `;\n    // });\n\n    skillDom.unshift('<div class=\"body\">');\n    skillDom.push(\"</div>\");\n\n    const container = new DOMParser().parseFromString(DOMPurify.sanitize(skillDom.join(\" \")), \"text/html\");\n    const fragments = new DocumentFragment();\n    while(container.body.firstChild) {\n      fragments.append(container.body.firstChild);\n    }\n\n    this.shadowRoot.querySelector(\".container\").append(fragments); \n  }\n\n  async styling() {\n    const sheet = new CSSStyleSheet();\n    // sheet.replaceSync(styles);\n    // sheet.replaceSync(styles.toString());\n    // styles.use({ target: this.shadowRoot });\n    const style = await import(`./skills-${this.styleType}.shadow.scss`);\n    sheet.replaceSync(style.default);\n    this.shadowRoot.adoptedStyleSheets = [sheet];\n  }\n\n  setupEventListener() {\n    this.listener = new Listener(this);\n    this.listener.setDelegates(this);\n    this.unsubscribe = eventManager.subscribe(\"completeFormRequest\", this.listener);\n  }\n\n  async handleCompleteFormRequest(event, delegated) {\n    const isDOM = delegated instanceof Listener;\n\n    if (isDOM) {\n      // this.render(event.detail.data.owner.skills);\n      this.appendData(event.detail.data.owner.skills);\n\n      await new Promise(resolve => requestAnimationFrame(() => resolve())).then(() => {\n        this.resolveFormRequestReady();\n      });\n    } else {\n      console.log(\"external\");\n    }\n  } \n\n  async publishCustomEvent(data) {\n    try {\n      if (data.await) {\n        await data.awaitDetail();\n      }\n\n      const eventDetail = {\n        bubbles: true,\n        composed: true,\n        detail: data.details,\n      };\n\n      eventManager.publish(data.eventName, eventDetail);\n    } catch (err) {\n      console.error(`Failed to publish ${data.eventName} : ${err}`);\n    }\n  }\n\n  // async testRender() {\n  //   const skills = yaml.owner.skills;\n  //   const logoColor = (obj) =>\n  //     obj.name.toLowerCase() == \"javascript\" ? \"black\" : \"white\";\n  //   const labelName = (obj) =>\n  //     obj.name.toLowerCase() == \"csharp\" ? \"C%23\" : obj.name;\n  //   const skillImg = async (obj) => {\n  //     if (Object.hasOwn(obj, \"icon\")) {\n  //       const badgeUrl = await toDataURL(obj.icon).then((dataURL) => {\n  //         const part = dataURL.split(\",\");\n  //         const mimeType = part[0].split(\":\")[1].split(\";\")[0];\n  //         const startMime = part[0].split(\"/\").shift();\n  //         const endMime = part[0].split(\";\").pop();\n  //         const fileType = mimeType.split(\"/\").pop();\n  //         const encodedFileType = encodeURIComponent(fileType);\n  //         const encodedData = encodeURIComponent(part[1]);\n  //         const badgeUrl = `https://img.shields.io/badge/${labelName(\n  //           obj,\n  //         )}-%23${obj.color}?style=for-the-badge&logo=${startMime}/${encodedFileType};${endMime},${encodedData}&logoColor=${logoColor(\n  //           obj,\n  //         )}`;\n  //\n  //         return badgeUrl;\n  //       });\n  //\n  //       return new Promise((resolve) => {\n  //         resolve(`\n  //           <img alt=\"${obj.name}\" src=\"${badgeUrl}\" class=\"badge\">\n  //         `);\n  //       });\n  //     } else {\n  //       return new Promise((resolve) => {\n  //         resolve(`\n  //           <img alt=\"Static Badge\" src=\"https://img.shields.io/badge/${labelName(\n  //             obj,\n  //           )}-%23${obj.color}?style=for-the-badge&logo=${obj.name}&logoColor=${logoColor(\n  //             obj,\n  //           )}\" class=\"badge\">\n  //         `);\n  //       });\n  //     }\n  //   };\n  //   const imgPromises = Object.values(skills).map((skill) => skillImg(skill));\n  //   const skillDom = await Promise.all(imgPromises);\n  //   // const skillDom = Object.values(skills).map((skill) => {\n  //   //   //<img class=\"img\" src=\"${skill.icon}\" alt=\"${skill.name.toLowerCase()}\" />\n  //   //   {/* <div class=\"card\"> */}\n  //   //   {/*   <span class=\"body\">${skill.name}</span> */}\n  //   //   {/* </div> */}\n  //   //\n  //   //   return `\n  //   //     <img alt=\"Static Badge\" src=\"https://img.shields.io/badge/${\n  //   //     labelName(skill)\n  //   //   }-%23${skill.color}?style=for-the-badge&logo=${skill.name}&logoColor=${\n  //   //     logoColor(skill)\n  //   //   }\">\n  //   //   `;\n  //   // });\n  //\n  //   skillDom.unshift('<div class=\"body\">');\n  //   skillDom.push(\"</div>\");\n  //\n  //   const i = icon(faCode, {\n  //     classes: [\"fa-code\"],\n  //   });\n  //\n  //   const dom = `\n  //     <div class=\"container\">\n  //       <h3 class=\"header\">\n  //         ${i.node[0].outerHTML}\n  //         <span class=\"title\">Skills</span>\n  //       </h3>\n  //       ${skillDom.join(\" \")} \n  //     </div>\n  //   `;\n  //\n  //   this.shadowRoot.innerHTML = DOMPurify.sanitize(dom);\n  // } \n}\n\nregisterCustomElement(\"user-skills\", UserSkills);\n","export async function toDataURL(url) {\n  return await fetch(url)\n    .then((response) => response.blob())\n    .then((blob) =>\n      new Promise((resolve, reject) => {\n        const reader = new FileReader();\n        reader.onloadend = () => resolve(reader.result);\n        reader.onerror = reject;\n        reader.readAsDataURL(blob);\n      })\n    );\n}\n","class ObjectRegistry {\n  constructor() {\n    this.registry = new Map();\n  }\n\n  set(key, value) {\n    this.registry.set(key, value);\n  }\n\n  get(key) {\n    return this.registry.get(key);\n  }\n\n  clear() {\n    this.registry.forEach((_, key) => this.registry.delete(key));\n  }\n}\n\nexport default new ObjectRegistry();\n","var map = {\n\t\"./skills-classic.shadow.scss\": [\n\t\t8980,\n\t\t8980\n\t],\n\t\"./skills-default.shadow.scss\": [\n\t\t2659,\n\t\t2659\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(() => {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn __webpack_require__.e(ids[1]).then(() => {\n\t\treturn __webpack_require__(id);\n\t});\n}\nwebpackAsyncContext.keys = () => (Object.keys(map));\nwebpackAsyncContext.id = 5575;\nmodule.exports = webpackAsyncContext;"],"names":["UserSkills","HTMLElement","constructor","super","this","attachShadow","mode","isReadyPromise","Promise","resolve","resolveReady","formRequestPromise","resolveFormRequestReady","listener","customEventData","await","awaitDetail","eventName","details","styleType","dataset","style","handleCompleteFormRequest","bind","unsubscribe","add","connectedCallback","setupEventListener","render","then","styling","disconnectedCallback","dom","classes","node","outerHTML","shadowRoot","innerHTML","sanitize","images","querySelectorAll","imagePromises","Array","from","map","img","complete","onload","onerror","all","requestAnimationFrame","appendData","data","skills","logoColor","obj","name","toLowerCase","labelName","imgPromises","Object","values","skill","async","hasOwn","badgeUrl","url","fetch","response","blob","reject","reader","FileReader","onloadend","result","readAsDataURL","toDataURL","icon","dataURL","part","split","mimeType","startMime","shift","endMime","pop","fileType","encodedFileType","encodeURIComponent","encodedData","color","toString","replace","skillImg","skillDom","skillsCount","length","unshift","push","container","DOMParser","parseFromString","join","fragments","DocumentFragment","body","firstChild","append","querySelector","sheet","CSSStyleSheet","replaceSync","default","adoptedStyleSheets","setDelegates","eventManager","subscribe","event","delegated","detail","owner","console","log","publishCustomEvent","eventDetail","bubbles","composed","publish","err","error","registry","Map","set","key","value","get","clear","forEach","_","delete","webpackAsyncContext","req","__webpack_require__","o","e","Error","code","ids","id","keys","module","exports"],"sourceRoot":""}