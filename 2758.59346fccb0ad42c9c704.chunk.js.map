{"version":3,"file":"2758.59346fccb0ad42c9c704.chunk.js","mappings":"iNAOe,MAAMA,UAAqBC,YACvC,WAAAC,GACGC,QACAC,KAAKC,aAAa,CAAEC,KAAM,SAC1BF,KAAKG,SACLH,KAAKI,WACR,CAEA,iBAAAC,GACGL,KAAKM,SACLN,KAAKO,UACLP,KAAKQ,oBACR,CAEA,oBAAAC,GACGT,KAAKI,aACR,CAEA,MAAAE,GAoBGN,KAAKU,WAAWC,UAAY,IAAUC,SAnB1B,4cAoBf,CAEA,OAAAL,GACG,MAAMM,EAAQ,IAAIC,cAClBD,EAAME,YAAY,UAAOC,YACzBhB,KAAKU,WAAWO,mBAAqB,CAACJ,EACzC,CAEA,kBAAAL,GACGR,KAAKG,SAAW,IAAI,IAASH,MAC7BA,KAAKI,YAAc,IAAac,UAAU,CAAC,eAAgB,eAAgBlB,KAAKG,SACnF,CAEA,kBAAAgB,CAAmBC,EAAOC,GACTA,aAAqB,IAGhCrB,KAAKU,WAAWY,cAAc,cAAcC,UAAUC,IAAI,WAE1DC,QAAQC,IAAI,WAElB,CAEA,iBAAAC,CAAkBP,EAAOC,GACRA,aAAqB,IAGhCrB,KAAKU,WAAWY,cAAc,cAAcC,UAAUK,OAAO,WAE7DH,QAAQC,IAAI,WAElB,GAGH,QAAsB,gBAAiB9B,E,kCC9DvC,YAlBA,MACE,WAAAE,GACEE,KAAK6B,SAAW,IAAIC,GACtB,CAEA,GAAAC,CAAIC,EAAKC,GACPjC,KAAK6B,SAASE,IAAIC,EAAKC,EACzB,CAEA,GAAAC,CAAIF,GACF,OAAOhC,KAAK6B,SAASK,IAAIF,EAC3B,CAEA,KAAAG,GACEnC,KAAK6B,SAASO,QAAQ,CAACC,EAAGL,IAAQhC,KAAK6B,SAASS,OAAON,GACzD,E","sources":["webpack://resume-builder/./src/components/loadingBlock/loadingBlock.js","webpack://resume-builder/./src/js/objectRegistry.js"],"sourcesContent":["import DOMPurify from \"dompurify\";\nimport Listener from \"../../js/listener.js\";\nimport { registerCustomElement } from \"../../js/registerComponent.js\";\nimport styles from \"./loadingBlock.shadow.scss\";\nimport eventManager from \"../../js/eventManager.js\";\nimport objectRegistry from \"../../js/objectRegistry.js\";\n\nexport default class LoadingBlock extends HTMLElement {\n   constructor() {\n      super();\n      this.attachShadow({ mode: \"open\" });\n      this.listener;\n      this.unsubscribe;\n   }\n\n   connectedCallback() {\n      this.render();\n      this.styling();\n      this.setupEventListener();   \n   }\n\n   disconnectedCallback() {\n      this.unsubscribe();\n   }\n\n   render() {\n      const dom = `\n         <div class=\"container\">\n            <div class=\"lds-default\">\n               <div></div>\n               <div></div>\n               <div></div>\n               <div></div>\n               <div></div>\n               <div></div>\n               <div></div>\n               <div></div>\n               <div></div>\n               <div></div>\n               <div></div>\n               <div></div>\n            </div>\n         </div>\n         `;\n\n      this.shadowRoot.innerHTML = DOMPurify.sanitize(dom);\n   }\n\n   styling() {\n      const sheet = new CSSStyleSheet();\n      sheet.replaceSync(styles.toString());\n      this.shadowRoot.adoptedStyleSheets = [sheet];\n   }\n\n   setupEventListener() {\n      this.listener = new Listener(this);\n      this.unsubscribe = eventManager.subscribe([\"startLoading\", \"stopLoading\"], this.listener);\n   }\n\n   handleStartLoading(event, delegated) {\n      const isDOM = delegated instanceof Listener;\n\n      if (isDOM) {\n         this.shadowRoot.querySelector(\".container\").classList.add(\"visible\");\n      } else {\n         console.log(\"external\");\n      }\n   } \n\n   handleStopLoading(event, delegated) {\n      const isDOM = delegated instanceof Listener;\n\n      if (isDOM) {\n         this.shadowRoot.querySelector(\".container\").classList.remove(\"visible\");\n      } else {\n         console.log(\"external\");\n      }\n   }\n}\n\nregisterCustomElement(\"loading-block\", LoadingBlock);\n","class ObjectRegistry {\n  constructor() {\n    this.registry = new Map();\n  }\n\n  set(key, value) {\n    this.registry.set(key, value);\n  }\n\n  get(key) {\n    return this.registry.get(key);\n  }\n\n  clear() {\n    this.registry.forEach((_, key) => this.registry.delete(key));\n  }\n}\n\nexport default new ObjectRegistry();\n"],"names":["LoadingBlock","HTMLElement","constructor","super","this","attachShadow","mode","listener","unsubscribe","connectedCallback","render","styling","setupEventListener","disconnectedCallback","shadowRoot","innerHTML","sanitize","sheet","CSSStyleSheet","replaceSync","toString","adoptedStyleSheets","subscribe","handleStartLoading","event","delegated","querySelector","classList","add","console","log","handleStopLoading","remove","registry","Map","set","key","value","get","clear","forEach","_","delete"],"sourceRoot":""}