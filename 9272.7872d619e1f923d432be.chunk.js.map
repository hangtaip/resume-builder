{"version":3,"file":"9272.7872d619e1f923d432be.chunk.js","mappings":"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","sources":["webpack://resume-builder/./src/js/objectRegistry.js","webpack://resume-builder/./src/components/formExperience/formExperience.js"],"sourcesContent":["class ObjectRegistry {\n  constructor() {\n    this.registry = new Map();\n  }\n\n  set(key, value) {\n    this.registry.set(key, value);\n  }\n\n  get(key) {\n    return this.registry.get(key);\n  }\n\n  clear() {\n    this.registry.forEach((_, key) => this.registry.delete(key));\n  }\n}\n\nexport default new ObjectRegistry();\n","import DOMPurify from \"dompurify\";\nimport Listener from \"../../js/listener.js\";\nimport { registerCustomElement } from \"../../js/registerComponent\";\nimport styles from \"./formExperience.shadow.scss\";\nimport { icon, library } from \"@fortawesome/fontawesome-svg-core\";\nimport { faRectangleXmark } from \"@fortawesome/free-solid-svg-icons\";\n// import yaml from \"../../data/data.yaml\";\nimport eventManager from \"../../js/eventManager.js\";\nimport objectRegistry from \"../../js/objectRegistry.js\";\n\nexport default class FormExperience extends HTMLElement {\n  static observedAttributes = [\"data-values\"];\n\n  constructor() {\n    super();\n    this.attachShadow({ mode: \"open\" });\n    this.listener;\n    this.customEventData = {\n      await: false,\n      awaitDetail() { return 0 },\n      eventName: \"handleCustomEvent\",\n      details: \"\",\n    };\n    this.unsubscribe;\n    this.dataValues;\n    library.add(faRectangleXmark);\n  }\n\n  render() {\n    const dom = `\n     <div class=\"container\">\n        <fieldset>\n           <legend>Experiences</legend>\n           <div class=\"view\">\n              <button class=\"clickable add-btn\" type=\"button\" title=\"Add experience\">Add</button>\n              ${this.customInput()} \n           </div>\n        </fieldset>\n     </div>\n     `;\n\n    this.shadowRoot.innerHTML = DOMPurify.sanitize(dom);\n  }\n\n  styling() {\n    const sheet = new CSSStyleSheet();\n    sheet.replaceSync(styles.toString());\n    this.shadowRoot.adoptedStyleSheets = [sheet];\n  }\n\n  setupEventListener() {\n    this.listener = new Listener(this);\n    this.listener.setDelegates(this);\n    this.listener.setDelegates(this.shadowRoot.querySelector(\".add-btn\"));\n    this.shadowRoot.addEventListener(\"click\", this.listener);\n    this.shadowRoot.addEventListener(\"transitionend\", this.listener);\n    this.unsubscribe = eventManager.subscribe(\n      \"importDataLoaded\",\n      this.listener,\n    );\n  }\n\n  handleClick(event, delegated) {\n    const isDOM = delegated instanceof Listener;\n\n    if (isDOM) {\n      let elem = event.target.closest(\".clickable\");\n\n      if (!elem) return;\n      if (!this.shadowRoot.contains(elem)) return;\n\n      switch (true) {\n        case elem.classList.contains(\"add-btn\"):\n          const dom = this.customInput();\n          const newExp = new DOMParser()\n            .parseFromString(DOMPurify.sanitize(dom), \"text/html\")\n            .body.querySelector(\"div.container\");\n          this.shadowRoot.querySelector(\"fieldset .view\").append(newExp);\n\n          this.setValueRequestDetail();\n          this.publishCustomEvent(this.customEventData);\n          break;\n        case elem.classList.contains(\"add-desc-btn\"):\n          const domDesc = this.customInputDescription();\n          const newDesc = new DOMParser()\n            .parseFromString(DOMPurify.sanitize(domDesc), \"text/html\")\n            .body.querySelector(\"custom-textarea\");\n          this.shadowRoot.querySelector(\"fieldset.desc\").append(newDesc); \n          break;\n        case elem.classList.contains(\"delete-btn\"):\n          if (elem.closest(\"fieldset.desc\")) {\n            if (\n              elem.closest(\"fieldset.desc\").querySelectorAll(\"custom-textarea\")\n                .length > 1\n            ) {\n              elem.closest(\"custom-textarea\").classList.add(\"removing\");\n            }\n            // elem.closest(\"fieldset.desc\").querySelectorAll(\"custom-textarea\").length <= 1\n            // || elem.closest(\"custom-textarea\").remove();\n          } else {\n            if (\n              this.shadowRoot.querySelectorAll(\".container.list\").length > 1\n            ) {\n              elem.closest(\".container.list\").classList.add(\"removing\");\n            }\n            // this.shadowRoot.querySelectorAll(\".container.list\").length <= 1\n            // || elem.closest(\".container.list\").remove();\n          }\n          break;\n      }\n    } else {\n      console.log(\"external\");\n    }\n  }\n\n  handleTransitionend(event, delegated) {\n    const isDOM = delegated instanceof Listener;\n\n    if (isDOM) {\n      let elem = event.target.closest(\".transitionable\");\n\n      if (!elem) return;\n      if (!this.shadowRoot.contains(elem)) return;\n\n      switch (true) {\n        case elem.matches(\".container.list.removing\"):\n          elem.remove();\n          this.setValueRequestDetail();\n          this.publishCustomEvent(this.customEventData);\n          break;\n        case elem.matches(\"custom-textarea.removing\"):\n          elem.remove();\n          break;\n      }\n    } else {\n      console.log(\"external\");\n    }\n  }\n\n  handleImportDataLoaded(event, delegated) {\n    const isDOM = delegated instanceof Listener;\n\n    if (isDOM) {\n      let elem = this.shadowRoot.querySelector(\".view\");\n\n      if (!elem) return;\n      if (!this.shadowRoot.contains(elem)) return;\n\n      let inputs = \"\";\n      const existingInputs =\n        this.shadowRoot.querySelectorAll(\".container.list\");\n\n      Object.values(event.detail.data.owner.exp).forEach((exp, i) => {\n        if (existingInputs[i]) {\n          return Object.keys(exp).map((key) => {\n            if (this.shadowRoot.querySelector(`input[data-attr=\"${key}\"]`)) {\n              this.shadowRoot.querySelector(`input[data-attr=\"${key}\"`).value =\n                exp[key];\n            }\n\n            if (key == \"desc\") {\n              this.shadowRoot.querySelector(\"custom-textarea\").dataset.values =\n                JSON.stringify(exp[key]);\n            }\n          });\n        }\n        inputs += this.customInput(exp);\n      });\n      const input = new DOMParser().parseFromString(inputs, \"text/html\");\n      const fragments = new DocumentFragment();\n      while (input.body.firstChild) {\n        fragments.append(input.body.firstChild);\n      }\n\n      this.shadowRoot.querySelector(\".view\").append(fragments);\n\n      this.importComplete();\n\n      this.setValueRequestDetail();\n      this.publishCustomEvent(this.customEventData);\n    } else {\n      console.log(\"external\");\n    }\n  }\n\n  importComplete() {\n    if (objectRegistry.registry.has(\"formLoaded\")) {\n      const readyCnt = objectRegistry.get(\"formLoaded\").get(\"readyCnt\") + 1;\n      const formCnt = objectRegistry.get(\"formLoaded\").get(\"formCnt\");\n      objectRegistry.get(\"formLoaded\").set(\"readyCnt\", readyCnt); \n\n      if (readyCnt == formCnt) {\n        this.customEventData.await = false;\n        this.customEventData.awaitDetail = () => {\n          return 0;\n        };\n        this.customEventData.eventName = \"stopLoading\";\n        this.customEventData.details = {};\n        this.publishCustomEvent(this.customEventData);\n      }\n    } else {\n      console.warn(`${this.constructor.name}: Please set default state for formLoaded before dispatch importDataLoaded event.`);\n    }\n  }\n\n  testDataInsert() {\n    let inputs = \"\";\n    const existingInputs = this.shadowRoot.querySelectorAll(\".container.list\");\n    Object.values(yaml.owner.exp).forEach((exp, i) => {\n      // inputs += this.customInput(`[\"${skill.name}\",\"${skill.color}\"]`);\n      if (existingInputs[i]) {\n        return Object.keys(exp).map((key) => {\n          if (this.shadowRoot.querySelector(`input[data-attr=\"${key}\"]`)) {\n            this.shadowRoot.querySelector(`input[data-attr=\"${key}\"`).value =\n              exp[key];\n          }\n\n          if (key == \"desc\") {\n            this.shadowRoot.querySelector(\"custom-textarea\").dataset.values =\n              JSON.stringify(exp[key]);\n          }\n        });\n      }\n      inputs += this.customInput(exp);\n    });\n    const input = new DOMParser().parseFromString(inputs, \"text/html\");\n    const fragments = new DocumentFragment();\n    while (input.body.firstChild) {\n      fragments.append(input.body.firstChild);\n    }\n\n    this.shadowRoot.querySelector(\".view\").append(fragments);\n  }\n\n  customInput(data = \"\") {\n    const xMark = icon(faRectangleXmark, {\n      classes: [\"fa-xMark\", \"icon\"],\n    });\n\n    return ` \n     <div class=\"container list transitionable\">\n        <div class=\"form-group\">\n          <div class=\"form-group-item\">\n            <label for=\"hf_exp_org\">Organisation</label>\n            <input type=\"text\" title=\"organisation\" placeholder=\"ABC Restaurant\" id=\"hf_exp_org\" data-width=\"20\" data-attr=\"org\" \n            ${data.org && data.org.length > 0 ? `value=\"${data.org}\"` : \"\"}\n          >\n          </div>\n          <div class=\"form-group-item\">\n            <label for=\"hf_exp_pos\">Position</label>\n            <input type=\"text\" title=\"position\" placeholder=\"Waiter\" id=\"hf_exp_pos\" data-width=\"20\" data-attr=\"pos\" \n            ${data.pos && data.pos.length > 0 ? `value=\"${data.pos}\"` : \"\"}\n            >\n          </div>\n          <div class=\"form-group-item\">\n            <fieldset class=\"duration\">\n              <legend>Duration</legend>\n                <div class=\"form-group\">\n                  <div class=\"form-group-item\">\n                    <label for=\"hf_exp_tl_from\">From</label>\n                    <input type=\"month\" title=\"duration\" placeholder=\"01/2024\" id=\"hf_exp_tl\" data-width=\"10\" data-attr=\"tl_from\" \n                    ${data.tl_from && data.tl_from.length > 0 ? `value=\"${data.tl_from}\"` : \"\"}\n                  >\n                  </div>\n                  <div class=\"form-group-item\">\n                    <label for=\"hf_exp_tl\">To</label>\n                    <input type=\"month\" title=\"duration\" placeholder=\"12/2024\" id=\"hf_exp_tl\" data-width=\"10\" data-attr=\"tl_to\" \n                    ${data.tl_to && data.tl_to.length > 0 ? `value=\"${data.tl_to}\"` : \"\"}\n                    >\n                </div>\n              </div>\n            </fieldset>\n          </div>\n          <div class=\"form-group-item\">\n            <fieldset class=\"desc\">\n              <legend>Description</legend>\n              ${this.customInputDescription(data.desc)} \n            </fieldset>\n          </div>\n        </div>\n        <button class=\"clickable delete-btn\" type=\"button\" title=\"Remove experiecnce\">${xMark.node[0].outerHTML}</button>\n     </div>\n    `;\n    {\n      /* <button class=\"clickable add-desc-btn\" type=\"button\" title=\"Add description\">Add</button> */\n    }\n    // return `\n    //  <button class=\"clickable add-btn\" type=\"button\" title=\"Add education\">Add</button>\n    //\n    //   <custom-input\n    //      title=\"experience\"\n    //      data-input-type='[\"text\", \"text\", \"month\", \"text\"]'\n    //      data-title='[\"organisation\", \"position\", \"duration\", \"description\"]'\n    //      data-placeholder='[\"ABC Restaurant\", \"Waiter\", \"01/2024-12/2024\", \"Learn table etiquette\"]'\n    //      data-id='[\"hf_exp_org\", \"hf_exp_pos\", \"hf_exp_tl\", \"hff_exp_desc\"]'\n    //    />\n    //      <label for=\"hf_exp_org\" slot=\"label_0\">Organisation</label>\n    //      <label for=\"hf_exp_pos\" slot=\"label_1\">Position</label>\n    //      <label for=\"hf_exp_tl\" slot=\"label_2\">Duration</label>\n    //      <label for=\"hf_exp_desc\" slot=\"label_3\">Description</label>\n    //      <button class=\"clickable delete-btn\" type=\"button\" title=\"Remove education\" slot=\"button_3\">${xMark.node[0].outerHTML}</button>\n    //    </custom-input>\n    // `;\n  }\n\n  customInputDescription(data = \"\") {\n    const xMark = icon(faRectangleXmark, {\n      classes: [\"fa-xMark\", \"icon\"],\n    });\n\n    return `\n      <custom-textarea\n        title=\"description\"\n        ${Object.entries(data).length > 1 ? `data-values='${JSON.stringify(data).replace(/'/g, \"&#39;\")}'` : \"\"}\n        class=\"transitionable\"\n        data-title='[\"description\"]'\n        data-attr='[\"desc\"]'\n        data-placeholder='[\"Learn table etiquette\"]'\n        data-id='[\"hf_exp_desc\"]'\n      >\n      </custom-textarea>\n    `;\n\n    {\n      /* <button class=\"clickable delete-btn\" type=\"button\" title=\"Remove description\">${xMark.node[0].outerHTML}</button> */\n    }\n  }\n\n  setValueRequestDetail() {\n    this.customEventData.await = false;\n    this.customEventData.eventName = \"valueRequest\";\n    this.customEventData.details = { [this.tagName.toLowerCase()]: this.shadowRoot.querySelectorAll(\".container.list > .form-group\") };\n  }\n\n  async publishCustomEvent(data) {\n    try {\n      if (data.await) {\n        await data.awaitDetail();\n      }\n\n      const eventDetail = {\n        bubbles: true,\n        composed: true,\n        detail: data.details,\n      };\n\n      eventManager.publish(data.eventName, eventDetail);\n    } catch (err) {\n      console.error(`Failed to publish ${data.eventName} : ${err}`);\n    }\n  }\n\n  connectedCallback() {\n    this.render();\n    this.setValueRequestDetail();\n    this.publishCustomEvent(this.customEventData);\n    this.styling();\n    this.setupEventListener();\n    // this.testDataInsert();\n  }\n\n  disconnectedCallback() {\n    this.unsubscribe();\n  }\n\n  attributeChangedCallback(name, oldValue, newValue) {\n    switch (name) {\n      case \"data-values\":\n        const values = JSON.parse(newValue || \"{}\");\n        let input;\n        Object.entries(values).forEach((value) => {\n          input = this.shadowRoot.querySelector(\n            `input[data-attr=\"${value[0]}\"]`,\n          );\n          if (input) {\n            switch (input.type) {\n              case \"text\":\n                input.value = value[1];\n                break;\n              case \"color\":\n                const hexColor = `#${value[1].toString().replace(/^#/, \"\")}`;\n                input.value = hexColor;\n                break;\n            }\n          }\n        });\n\n        break;\n    }\n  }\n}\n\nregisterCustomElement(\"form-experience\", FormExperience);\n"],"names":["constructor","this","registry","Map","set","key","value","get","clear","forEach","_","delete","FormExperience","HTMLElement","static","super","attachShadow","mode","listener","customEventData","await","awaitDetail","eventName","details","unsubscribe","dataValues","add","render","dom","customInput","shadowRoot","innerHTML","sanitize","styling","sheet","CSSStyleSheet","replaceSync","toString","adoptedStyleSheets","setupEventListener","setDelegates","querySelector","addEventListener","subscribe","handleClick","event","delegated","elem","target","closest","contains","classList","newExp","DOMParser","parseFromString","body","append","setValueRequestDetail","publishCustomEvent","domDesc","customInputDescription","newDesc","querySelectorAll","length","console","log","handleTransitionend","matches","remove","handleImportDataLoaded","inputs","existingInputs","Object","values","detail","data","owner","exp","i","keys","map","dataset","JSON","stringify","input","fragments","DocumentFragment","firstChild","importComplete","has","readyCnt","formCnt","warn","name","testDataInsert","yaml","xMark","classes","org","pos","tl_from","tl_to","desc","node","outerHTML","entries","replace","tagName","toLowerCase","eventDetail","bubbles","composed","publish","err","error","connectedCallback","disconnectedCallback","attributeChangedCallback","oldValue","newValue","parse","type","hexColor"],"sourceRoot":""}