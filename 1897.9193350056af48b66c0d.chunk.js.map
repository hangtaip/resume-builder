{"version":3,"file":"1897.9193350056af48b66c0d.chunk.js","mappings":"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","sources":["webpack://resume-builder/./src/components/formEducations/formEducations.js","webpack://resume-builder/./src/js/objectRegistry.js"],"sourcesContent":["import DOMPurify from \"dompurify\";\nimport Listener from \"../../js/listener.js\";\nimport { registerCustomElement } from \"../../js/registerComponent.js\";\nimport styles from \"./formEducations.shadow.scss\";\nimport { icon, library } from \"@fortawesome/fontawesome-svg-core\";\nimport { faRectangleXmark } from \"@fortawesome/free-solid-svg-icons\";\nimport yaml from \"../../data/data.yaml\";\nimport eventManager from \"../../js/eventManager.js\";\nimport objectRegistry from \"../../js/objectRegistry.js\";\n\nexport default class FormEducations extends HTMLElement {\n  constructor() {\n    super();\n    this.attachShadow({ mode: \"open\" });\n    this.isReadyPromise = new Promise(resolve => {\n      this.resolveReady = resolve;\n    });\n    this.listener;\n    this.customEventData = {\n      await: false,\n      awaitDetail() { return 0 },\n      eventName: \"handleCustomEvent\",\n      details: \"\",\n    };\n    this.unsubscribe;\n    library.add(faRectangleXmark);\n  }\n\n  connectedCallback() {\n    this.render().then(() => {\n      this.resolveReady();\n    });\n    this.setValueRequestDetail();\n    this.publishCustomEvent(this.customEventData);\n    this.styling();\n    this.setupEventListener();\n    // this.testDataInsert();\n  }\n\n  disconnectedCallback() {\n    this.unsubscribe();\n  }\n\n  async render() {\n    const dom = `\n         <div class=\"container\">\n            <fieldset>\n               <legend>Education</legend>\n               <div class=\"view\">\n                 <button type=\"button\" class=\"clickable add-btn\" title=\"Add education\">Add</button>\n                 ${this.customInput()} \n               </div>\n            </fieldset>\n         </div>\n         `;\n\n    this.shadowRoot.innerHTML = DOMPurify.sanitize(dom);\n\n    await new Promise(resolve => requestAnimationFrame(() => resolve()));\n  }\n\n  styling() {\n    const sheet = new CSSStyleSheet();\n    sheet.replaceSync(styles.toString());\n    this.shadowRoot.adoptedStyleSheets = [sheet];\n  }\n\n  setupEventListener() {\n    this.listener = new Listener(this);\n    this.listener.setDelegates(this);\n    this.listener.setDelegates(this.shadowRoot.querySelector(\".add-btn\"));\n    this.shadowRoot.addEventListener(\"click\", this.listener);\n    this.shadowRoot.addEventListener(\"transitionend\", this.listener);\n    // this.shadowRoot.addEventListener(\"input\", this.listener);\n    this.unsubscribe = eventManager.subscribe(\n      \"importDataLoaded\",\n      this.listener,\n    );\n  }\n\n  handleClick(event, delegated) {\n    const isDOM = delegated instanceof Listener;\n\n    if (isDOM) {\n      let elem = event.target.closest(\".clickable\");\n\n      if (!elem) return;\n      if (!this.shadowRoot.contains(elem)) return;\n\n      switch (true) {\n        case elem.classList.contains(\"add-btn\"):\n          const dom = this.customInput();\n          const newEdu = new DOMParser()\n            .parseFromString(DOMPurify.sanitize(dom), \"text/html\")\n            .body.querySelector(\"custom-input\");\n\n          this.shadowRoot.querySelector(\"fieldset .view\").append(newEdu);\n          this.setValueRequestDetail();\n          this.publishCustomEvent(this.customEventData);\n\n          break;\n        case elem.classList.contains(\"delete-btn\"):\n          if (this.shadowRoot.querySelectorAll(\"custom-input\").length > 1) {\n            elem.closest(\"custom-input\").classList.add(\"removing\");\n\n            // TODO: create event once instead of every click\n            // elem.closest(\"custom-input\").addEventListener(\"transitionend\", () => {\n            //   elem.closest(\"custom-input\").remove();\n            // }, { once: true });\n          }\n          // this.shadowRoot.querySelectorAll(\"custom-input\").length <= 1\n          //   || elem.closest(\"custom-input\").remove();\n          break;\n      }\n    } else {\n      console.log(\"external\");\n    }\n  }\n\n  handleTransitionend(event, delegated) {\n    const isDOM = delegated instanceof Listener;\n\n    if (isDOM) {\n      let elem = event.target.closest(\".transitionable\");\n\n      if (!elem) return;\n      if (!this.shadowRoot.contains(elem)) return;\n\n      switch (true) {\n        case elem.tagName.toLowerCase() == \"custom-input\":\n          if (elem.classList.contains(\"removing\")) {\n            elem.remove();\n            this.setValueRequestDetail();\n            this.publishCustomEvent(this.customEventData);\n          }\n          break;\n      }\n    } else {\n      console.log(\"external\");\n    }\n  }\n\n  handleImportDataLoaded(event, delegated) {\n    const isDOM = delegated instanceof Listener;\n\n    if (isDOM) {\n      let elem = this.shadowRoot.querySelector(\".view\");\n\n      if (!elem) return;\n      if (!this.shadowRoot.contains(elem)) return;\n\n      let inputs = \"\";\n      const existingInputs = this.shadowRoot.querySelectorAll(\"custom-input\");\n\n      // TODO: handle null\n      Object.values(event.detail.data.owner.edu).forEach((edu, i) => {\n        // inputs += this.customInput(`[\"${skill.name}\",\"${skill.color}\"]`);\n        if (existingInputs[i]) {\n          return (this.shadowRoot.querySelector(\"custom-input\").dataset.values =\n            JSON.stringify(edu));\n        }\n        inputs += this.customInput(edu);\n      });\n      const input = new DOMParser().parseFromString(inputs, \"text/html\");\n      const fragments = new DocumentFragment();\n      while (input.body.firstChild) {\n        fragments.append(input.body.firstChild);\n      }\n\n      this.shadowRoot.querySelector(\".view\").append(fragments);\n\n      this.importComplete();\n\n      this.setValueRequestDetail();\n      this.publishCustomEvent(this.customEventData);\n    } else {\n      console.log(\"external\");\n    }\n  }\n\n  importComplete() {\n    if (objectRegistry.registry.has(\"formLoaded\")) {\n      const readyCnt = objectRegistry.get(\"formLoaded\").get(\"readyCnt\") + 1;\n      const formCnt = objectRegistry.get(\"formLoaded\").get(\"formCnt\");\n      objectRegistry.get(\"formLoaded\").set(\"readyCnt\", readyCnt); \n\n      if (readyCnt == formCnt) {\n        this.customEventData.await = false;\n        this.customEventData.awaitDetail = () => {\n          return 0;\n        };\n        this.customEventData.eventName = \"stopLoading\";\n        this.customEventData.details = {};\n        this.publishCustomEvent(this.customEventData);\n      }\n    } else {\n      console.warn(`${this.constructor.name}: Please set default state for formLoaded before dispatch importDataLoaded event.`);\n    }\n  }\n\n  testDataInsert() {\n    let inputs = \"\";\n    const existingInputs = this.shadowRoot.querySelectorAll(\"custom-input\");\n\n    Object.values(yaml.owner.edu).forEach((edu, i) => {\n      if (existingInputs[i]) {\n        return (this.shadowRoot.querySelector(\"custom-input\").dataset.values =\n          JSON.stringify(edu));\n      }\n      inputs += this.customInput(edu);\n    });\n    const input = new DOMParser().parseFromString(inputs, \"text/html\");\n    const fragments = new DocumentFragment();\n    while (input.body.firstChild) {\n      fragments.append(input.body.firstChild);\n    }\n\n    this.shadowRoot.querySelector(\".view\").append(fragments);\n  }\n\n  customInput(data = \"\") {\n    const xMark = icon(faRectangleXmark, {\n      classes: [\"fa-xMark\", \"icon\"],\n    });\n\n    return `\n      <custom-input \n        title=\"edu\" \n        class=\"transitionable\"\n        data-title='[\"field\", \"uni\"]' \n        ${Object.entries(data).length > 1 ? `data-values='${JSON.stringify(data)}'` : \"\"}\n        data-attr='[\"field\", \"alma\"]'\n        data-placeholder='[\"Certificate in Housemanship\", \"ABC College\"]' \n        data-id='[\"hf_edu_field\", \"hf_edu_uni\"]'\n        data-width='[\"20\",\"20\"]'\n     />\n        <label for=\"hf_edu_field\" slot=\"label_0\">Field</label>\n        <label for=\"hf_edu_uni\" slot=\"label_1\">Institute</label>\n        <button class=\"clickable delete-btn\" type=\"button\" title=\"Remove education\">${xMark.node[0].outerHTML}</button> \n     </custom-input>\n    `;\n  }\n\n  setValueRequestDetail() {\n    this.customEventData.await = false;\n    this.customEventData.eventName = \"valueRequest\";\n    this.customEventData.details = { \"form-education\": this.shadowRoot.querySelectorAll(\"custom-input\") }\n  }\n\n  async publishCustomEvent(data) {\n    try {\n      if (data.await) {\n        await data.awaitDetail();\n      }\n\n      const eventDetail = {\n        bubbles: true,\n        composed: true,\n        detail: data.details,\n      };\n\n      eventManager.publish(data.eventName, eventDetail);\n    } catch (err) {\n      console.error(`Failed to publish ${data.eventName} : ${err}`);\n    }\n  } \n}\n\nregisterCustomElement(\"form-educations\", FormEducations);\n","class ObjectRegistry {\n  constructor() {\n    this.registry = new Map();\n  }\n\n  set(key, value) {\n    this.registry.set(key, value);\n  }\n\n  get(key) {\n    return this.registry.get(key);\n  }\n\n  clear() {\n    this.registry.forEach((_, key) => this.registry.delete(key));\n  }\n}\n\nexport default new ObjectRegistry();\n"],"names":["FormEducations","HTMLElement","constructor","super","this","attachShadow","mode","isReadyPromise","Promise","resolve","resolveReady","listener","customEventData","await","awaitDetail","eventName","details","unsubscribe","add","connectedCallback","render","then","setValueRequestDetail","publishCustomEvent","styling","setupEventListener","disconnectedCallback","dom","customInput","shadowRoot","innerHTML","sanitize","requestAnimationFrame","sheet","CSSStyleSheet","replaceSync","toString","adoptedStyleSheets","setDelegates","querySelector","addEventListener","eventManager","subscribe","handleClick","event","delegated","elem","target","closest","contains","classList","newEdu","DOMParser","parseFromString","body","append","querySelectorAll","length","console","log","handleTransitionend","tagName","toLowerCase","remove","handleImportDataLoaded","inputs","existingInputs","Object","values","detail","data","owner","edu","forEach","i","dataset","JSON","stringify","input","fragments","DocumentFragment","firstChild","importComplete","objectRegistry","registry","has","readyCnt","get","formCnt","set","warn","name","testDataInsert","xMark","classes","entries","node","outerHTML","eventDetail","bubbles","composed","publish","err","error","Map","key","value","clear","_","delete"],"sourceRoot":""}