{"version":3,"file":"6956.620e21a9920307895c75.chunk.js","mappings":"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","sources":["webpack://resume-builder/./src/js/objectRegistry.js","webpack://resume-builder/./src/components/formSkills/formSkills.js"],"sourcesContent":["class ObjectRegistry {\n  constructor() {\n    this.registry = new Map();\n  }\n\n  set(key, value) {\n    this.registry.set(key, value);\n  }\n\n  get(key) {\n    return this.registry.get(key);\n  }\n\n  clear() {\n    this.registry.forEach((_, key) => this.registry.delete(key));\n  }\n}\n\nexport default new ObjectRegistry();\n","import DOMPurify from \"dompurify\";\nimport Listener from \"../../js/listener.js\";\nimport { registerCustomElement } from \"../../js/registerComponent\";\nimport styles from \"./formSkills.shadow.scss\";\nimport { icon, library } from \"@fortawesome/fontawesome-svg-core\";\nimport { faRectangleXmark } from \"@fortawesome/free-solid-svg-icons\";\nimport eventManager from \"../../js/eventManager.js\";\n// import yaml from \"../../data/data.yaml\";\nimport objectRegistry from \"../../js/objectRegistry.js\";\n\nexport default class FormSkills extends HTMLElement {\n  constructor() {\n    super();\n    this.attachShadow({ mode: \"open\" });\n    this.listener;\n    this.customEventData = {\n      await: false,\n      awaitDetail() {\n        return 0;\n      },\n      eventName: \"handleCustomEvent\",\n      details: \"\",\n    };\n    this.unsubscribe;\n    library.add(faRectangleXmark);\n  }\n\n  connectedCallback() {\n    this.render();\n    this.setValueRequestDetail();\n    this.publishCustomEvent(this.customEventData);\n    this.styling();\n    this.setupEventListener();\n    // this.testDataInsert();\n  }\n\n  disconnectedCallback() {\n    this.unsubscribe();\n  }\n\n  render() {\n    const dom = `\n         <div class=\"container\">\n          <fieldset>\n            <legend>Skills</legend>\n            <div class=\"view\">\n              <button class=\"clickable add-btn\" type=\"button\" title=\"Add education\">Add</button>\n              ${this.customInput()} \n            </div>\n          </fieldset>\n         </div>\n         `;\n\n    this.shadowRoot.innerHTML = DOMPurify.sanitize(dom);\n  }\n\n  styling() {\n    const sheet = new CSSStyleSheet();\n    sheet.replaceSync(styles.toString());\n    this.shadowRoot.adoptedStyleSheets = [sheet];\n  }\n\n  setupEventListener() {\n    this.listener = new Listener(this);\n    this.listener.setDelegates(this);\n    this.listener.setDelegates(this.shadowRoot.querySelector(\".add-btn\"));\n    this.shadowRoot.addEventListener(\"click\", this.listener);\n    this.shadowRoot.addEventListener(\"transitionend\", this.listener);\n    this.unsubscribe = eventManager.subscribe(\n      \"importDataLoaded\",\n      this.listener,\n    );\n  }\n\n  handleClick(event, delegated) {\n    const isDOM = delegated instanceof Listener;\n\n    if (isDOM) {\n      let elem = event.target.closest(\".clickable\");\n\n      if (!elem) return;\n      if (!this.shadowRoot.contains(elem)) return;\n\n      switch (true) {\n        case elem.classList.contains(\"add-btn\"):\n          const dom = this.customInput();\n          const newSkill = new DOMParser()\n            .parseFromString(DOMPurify.sanitize(dom), \"text/html\")\n            .body.querySelector(\"custom-input\");\n\n          this.shadowRoot.querySelector(\"fieldset .view\").append(newSkill);\n          this.setValueRequestDetail();\n          this.publishCustomEvent(this.customEventData);\n          break;\n        case elem.classList.contains(\"delete-btn\"):\n          if (this.shadowRoot.querySelectorAll(\"custom-input\").length > 1) {\n            elem.closest(\"custom-input\").classList.add(\"removing\");\n          }\n\n          // this.shadowRoot.querySelectorAll(\"custom-input\").length <= 1 || elem.closest(\"custom-input\").remove();\n          break;\n      }\n    } else {\n      console.log(\"external\");\n    }\n  }\n\n  handleTransitionend(event, delegated) {\n    const isDOM = delegated instanceof Listener;\n\n    if (isDOM) {\n      let elem = event.target.closest(\".transitionable\");\n\n      if (!elem) return;\n      if (!this.shadowRoot.contains(elem)) return;\n\n      switch (true) {\n        case elem.tagName.toLowerCase() == \"custom-input\":\n          if (elem.classList.contains(\"removing\")) {\n            elem.remove();\n            this.setValueRequestDetail();\n            this.publishCustomEvent(this.customEventData);\n          }\n          break;\n      }\n    } else {\n      console.log(\"external\");\n    }\n  }\n\n  handleImportDataLoaded(event, delegated) {\n    const isDOM = delegated instanceof Listener;\n\n    if (isDOM) {\n      let elem = this.shadowRoot.querySelector(\".view\");\n\n      if (!elem) return;\n      if (!this.shadowRoot.contains(elem)) return;\n\n      let inputs = \"\";\n      const existingInputs = this.shadowRoot.querySelectorAll(\"custom-input\");\n      Object.values(event.detail.data.owner.skills).forEach((skill, i) => {\n        // inputs += this.customInput(`[\"${skill.name}\",\"${skill.color}\"]`);\n        if (existingInputs[i]) {\n          return (this.shadowRoot.querySelector(\"custom-input\").dataset.values =\n            JSON.stringify(skill));\n        }\n        inputs += this.customInput(skill);\n      });\n      const input = new DOMParser().parseFromString(inputs, \"text/html\");\n      const fragments = new DocumentFragment();\n      while (input.body.firstChild) {\n        fragments.append(input.body.firstChild);\n      }\n\n      this.shadowRoot.querySelector(\".view\").append(fragments);\n\n      this.importComplete();\n\n      this.setValueRequestDetail();\n      this.publishCustomEvent(this.customEventData);\n      // Array.from(elem.querySelectorAll(\"custom-input\")).forEach(elem => {\n      //   const key = elem.dataset.attr;\n      //   console.log(event.detail.data.owner[key]);\n      //   elem.dataset.value = event.detail.data.owner[key] || \"\";\n      // });\n    } else {\n      console.log(\"external\");\n    }\n  }\n\n  importComplete() {\n    if (objectRegistry.registry.has(\"formLoaded\")) {\n      const readyCnt = objectRegistry.get(\"formLoaded\").get(\"readyCnt\") + 1;\n      const formCnt = objectRegistry.get(\"formLoaded\").get(\"formCnt\");\n      objectRegistry.get(\"formLoaded\").set(\"readyCnt\", readyCnt);\n\n      if (readyCnt == formCnt) {\n        this.customEventData.await = false;\n        this.customEventData.awaitDetail = () => {\n          return 0;\n        };\n        this.customEventData.eventName = \"stopLoading\";\n        this.customEventData.details = {};\n        this.publishCustomEvent(this.customEventData);\n      }\n    } else {\n      console.warn(\n        `${this.constructor.name}: Please set default state for formLoaded before dispatch importDataLoaded event.`,\n      );\n    }\n  }\n\n  testDataInsert() {\n    let inputs = \"\";\n    const existingInputs = this.shadowRoot.querySelectorAll(\"custom-input\");\n    Object.values(yaml.owner.skills).forEach((skill, i) => {\n      // inputs += this.customInput(`[\"${skill.name}\",\"${skill.color}\"]`);\n      if (existingInputs[i]) {\n        return (this.shadowRoot.querySelector(\"custom-input\").dataset.values =\n          JSON.stringify(skill));\n      }\n      inputs += this.customInput(skill);\n    });\n    const input = new DOMParser().parseFromString(inputs, \"text/html\");\n    const fragments = new DocumentFragment();\n    while (input.body.firstChild) {\n      fragments.append(input.body.firstChild);\n    }\n\n    this.shadowRoot.querySelector(\".view\").append(fragments);\n  }\n\n  customInput(data = \"\") {\n    const xMark = icon(faRectangleXmark, {\n      classes: [\"fa-xMark\", \"icon\"],\n    });\n\n    return ` \n      <custom-input \n        title=\"skills\"\n        class=\"transitionable\"\n        data-title='[\"name\", \"color\"]' \n        ${Object.entries(data).length > 1 ? `data-values='${JSON.stringify(data)}'` : \"\"}\n        data-attr='[\"name\", \"color\"]'\n        data-input-type='[\"text\", \"color\"]' \n        data-placeholder='[\"Housemanship\", \"Green\"]' \n        data-id='[\"hf_skills_name\", \"hf_skills_color\"]'\n        data-form-group-item='[\"\", \"flex-0\"]'\n        data-width='[\"20\",\"2\"]'\n      />\n         <label for=\"hf_skills_name\" slot=\"label_0\">Name</label>\n         <label for=\"hf_skills_color\" slot=\"label_1\">Color</label>\n         <button class=\"clickable delete-btn\" type=\"button\" title=\"Remove skill\" >${xMark.node[0].outerHTML}</button> \n      </custom-input>\n    `;\n  }\n\n  setValueRequestDetail() {\n    this.customEventData.await = false;\n    this.customEventData.eventName = \"valueRequest\";\n    this.customEventData.details = {\n      [this.tagName.toLowerCase()]:\n        this.shadowRoot.querySelectorAll(\"custom-input\"),\n    };\n  }\n\n  async publishCustomEvent(data) {\n    try {\n      if (data.await) {\n        await data.awaitDetail();\n      }\n\n      const eventDetail = {\n        bubbles: true,\n        composed: true,\n        detail: data.details,\n      };\n\n      eventManager.publish(data.eventName, eventDetail);\n    } catch (err) {\n      console.error(`Failed to publish ${data.eventName} : ${err}`);\n    }\n  }\n}\n\nregisterCustomElement(\"form-skills\", FormSkills);\n"],"names":["constructor","this","registry","Map","set","key","value","get","clear","forEach","_","delete","FormSkills","HTMLElement","super","attachShadow","mode","listener","customEventData","await","awaitDetail","eventName","details","unsubscribe","add","connectedCallback","render","setValueRequestDetail","publishCustomEvent","styling","setupEventListener","disconnectedCallback","dom","customInput","shadowRoot","innerHTML","sanitize","sheet","CSSStyleSheet","replaceSync","toString","adoptedStyleSheets","setDelegates","querySelector","addEventListener","subscribe","handleClick","event","delegated","elem","target","closest","contains","classList","newSkill","DOMParser","parseFromString","body","append","querySelectorAll","length","console","log","handleTransitionend","tagName","toLowerCase","remove","handleImportDataLoaded","inputs","existingInputs","Object","values","detail","data","owner","skills","skill","i","dataset","JSON","stringify","input","fragments","DocumentFragment","firstChild","importComplete","has","readyCnt","formCnt","warn","name","testDataInsert","yaml","xMark","classes","entries","node","outerHTML","eventDetail","bubbles","composed","publish","err","error"],"sourceRoot":""}