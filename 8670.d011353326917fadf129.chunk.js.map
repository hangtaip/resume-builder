{"version":3,"file":"8670.d011353326917fadf129.chunk.js","mappings":"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","sources":["webpack://resume-builder/./src/components/customInput/customInput.js"],"sourcesContent":["import DOMPurify from \"dompurify\";\nimport Listener from \"../../js/listener.js\";\nimport { registerCustomElement } from \"../../js/registerComponent\";\nimport styles from \"./customInput.shadow.scss\";\nimport { registry } from \"../../js/functionRegistry.js\";\n\nexport default class CustomInput extends HTMLElement {\n  static observedAttributes = [\"data-event\", \"data-values\"];\n\n  constructor() {\n    super();\n    this.attachShadow({ mode: \"open\" });\n    this.listener;\n    this.dataID = JSON.parse(this.dataset.id || \"[]\");\n    this.inputCount = this.dataID.length || \"1\";\n    this.placeHolder = JSON.parse(this.dataset.placeholder || '[\"Enter text\"]');\n    this.type = JSON.parse(this.dataset.inputType || \"[]\");\n    this.title = this.getAttribute(\"title\") || [\"Custom Input\"];\n    this.dataAttr = JSON.parse(this.dataset.attr || \"{}\");\n    this.dataFormGroupItem = JSON.parse(this.dataset.formGroupItem || \"{}\");\n    this.dataClass = JSON.parse(this.dataset.class || \"{}\");\n    this.dataTitle = JSON.parse(this.dataset.title || \"{}\");\n    this.dataWidth = JSON.parse(this.dataset.width || \"{}\");\n    this.dataValues = JSON.parse(this.dataset.values || \"{}\");\n    this.dataEvent;\n  }\n\n  async render() {\n    const dom = `\n         <div class=\"container\">\n            <div class=\"form-group\">\n            ${Array.from({ length: this.inputCount }, (_, i) => {\n              return `\n                <div class=\"form-group-item ${this.dataFormGroupItem.length > 0 ? ` ${this.dataFormGroupItem[i]}` : \"\"}\">\n                  <slot name=\"label_${i}\"></slot>\n                  <input \n                     ${this.dataTitle.length > 0 ? `title=\"${this.dataTitle[i]}\"` : 'title=\"field\"'}\n                     ${this.type.length == 0 || (this.type.length > 0 && this.type[i] == \"text\") ? `placeholder=\"${this.placeHolder[i]}\"` : \"\"}\n                     ${this.type.length > 0 ? `type=\"${this.type[i]}\"` : 'type=\"text\"'} \n                     ${this.dataClass.length > 0 ? `class=\"${this.dataClass[i]}\"` : \"\"} \n                     ${this.dataID.length > 0 ? `id=\"${this.dataID[i]}_${i}\"` : \"\"} \n                     ${this.dataAttr.length > 0 ? `data-attr=\"${this.dataAttr[i]}\"` : \"\"}\n                     ${this.dataWidth.length > 0 ? `data-width=\"${this.dataWidth[i]}\"` : \"\"}\n                  >\n                </div> \n               `;\n            }).join(\"\")}\n            </div>\n            <slot class=\"other\"></slot>\n         </div>\n         `;\n\n    this.shadowRoot.innerHTML = DOMPurify.sanitize(dom);\n\n    if (Object.entries(this.dataValues).length > 0) {\n      const inputs = this.shadowRoot.querySelectorAll(\"input\"); \n      inputs.forEach(input => {\n        switch (input.type) {\n          case \"text\":\n            input.value = this.dataValues[input.dataset.attr];\n            break;\n          case \"color\":\n            const hexColor = `#${this.dataValues[input.dataset.attr].toString().replace(/^#/, \"\")}`;\n            input.value = hexColor;\n            break;\n        }\n        \n      });\n    }\n\n    await new Promise((resolve) => setTimeout(resolve, 0));\n  }\n\n  styling() {\n    const sheet = new CSSStyleSheet();\n    sheet.replaceSync(styles.toString());\n    this.shadowRoot.adoptedStyleSheets = [sheet];\n  }\n\n  setupEventListener() {\n    this.listener = new Listener(this);\n    Object.values(JSON.parse(this.dataEvent)).forEach((obj) => {\n      const getNode = new Function(`return ${obj.target}`).bind(this);\n      const node = getNode();\n      const getContext = new Function(`return ${obj.context}`).bind(this);\n      const context = getContext();\n      this.listener.setDelegates(node);\n      context.addEventListener(obj.event, this.listener);\n\n      // TODO: add name matching when attachTo\n      registry.attachTo(obj.event, obj.name, this);\n    });\n    // this.listener.setDelegates(this);\n    // this.listener.setDelegates(this.shadowRoot.querySelector(\".upload-img\"));\n    // this.shadowRoot.querySelector(\".upload-img\").addEventListener(\"change\", this.listener);\n  }\n\n  handleClick(event, delegated) {\n    const isDOM = delegated instanceof Listener;\n\n    if (isDOM) {\n      let elem = event.target.closest(\".clickable\");\n\n      if (!elem) return;\n      if (!this.shadowRoot.contains(elem)) return;\n\n      switch (true) {\n        case elem.classList.contains(\"upload-btn\"):\n          break;\n      }\n    } else {\n      console.log(\"external\");\n    }\n  }\n\n\n  // handleChange(event, delegated) {\n  //   const isDOM = delegated instanceof Listener;\n  //\n  //   if (isDOM) {\n  //     let elem = event.target.closest(\".changeable\");\n  //\n  //     if (!elem) return;\n  //     if (!this.shadowRoot.contains(elem)) return;\n  //\n  //     switch (true) {\n  //       case elem.classList.contains(\"upload-img\"):\n  //         let reader;\n  //\n  //         if (elem.files && elem.files[0]) {\n  //           reader = new FileReader();\n  //\n  //           reader.onload = (e) => {\n  //             this.closest(\"pimage\").querySelector(\"img\").src = e.target.result;\n  //           };\n  //           reader.readAsDataURL(this.shadowRoot.querySelector(\".upload-img\").files[0]);\n  //         }\n  //         break;\n  //     }\n  //   }\n  // }\n\n  getInputValue() {\n    return this.shadowRoot.querySelector(\"input\")?.value;\n  }\n\n  async connectedCallback() {\n    await this.render();\n    this.styling();\n  }\n\n  attributeChangedCallback(name, oldValue, newValue) {\n    switch (name) {\n      case \"data-event\":\n        this.dataEvent = newValue;\n        this.setupEventListener();\n        break;\n      case \"data-values\":\n        const values = JSON.parse(newValue || \"{}\");\n        let input;\n        Object.entries(values).forEach(value => {\n          input = this.shadowRoot.querySelector(`input[data-attr=\"${value[0]}\"]`);\n          if (input) {\n            switch(input.type) {\n              case \"text\":\n                input.value = value[1]\n                break;\n              case \"color\":\n                const hexColor = `#${value[1].toString().replace(/^#/, \"\")}`;\n                input.value = hexColor;\n                break;\n            }\n          };\n        });\n\n        break;\n    }\n  }\n}\n\nregisterCustomElement(\"custom-input\", CustomInput);\n"],"names":["CustomInput","HTMLElement","static","constructor","super","this","attachShadow","mode","listener","dataID","JSON","parse","dataset","id","inputCount","length","placeHolder","placeholder","type","inputType","title","getAttribute","dataAttr","attr","dataFormGroupItem","formGroupItem","dataClass","class","dataTitle","dataWidth","width","dataValues","values","dataEvent","render","dom","Array","from","_","i","join","shadowRoot","innerHTML","sanitize","Object","entries","querySelectorAll","forEach","input","value","hexColor","toString","replace","Promise","resolve","setTimeout","styling","sheet","CSSStyleSheet","replaceSync","adoptedStyleSheets","setupEventListener","obj","node","Function","target","bind","getNode","context","getContext","setDelegates","addEventListener","event","attachTo","name","handleClick","delegated","elem","closest","contains","classList","console","log","getInputValue","querySelector","connectedCallback","attributeChangedCallback","oldValue","newValue"],"sourceRoot":""}